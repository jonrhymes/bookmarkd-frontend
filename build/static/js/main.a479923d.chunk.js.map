{"version":3,"sources":["form.js","App.js","serviceWorker.js","index.js"],"names":["props","React","useState","initial","formData","setFormData","useEffect","handleChange","event","target","name","value","className","type","title","onChange","placeholder","url","formType","onClick","handleSubmit","App","bookmarks","setBookmarks","editingBookmarkId","setEditingBookmarkId","getInfo","a","fetch","response","json","result","handleDelete","id","method","openEditForm","handleEdit","newData","headers","body","JSON","stringify","handleCreate","data","sort","bookmark1","bookmark2","map","bookmark","key","_id","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a479923d.chunk.js","sourcesContent":["import React from 'react'\n\nexport default (props) => {\n\n        // State for form data\n        const [formData, setFormData] = React.useState(props.initial);\n \n        // Data updates when state changes\n        React.useEffect(()=> {\n            setFormData(props.initial)\n        }, [props.initial])\n    \n        const handleChange = (event) => {\n            setFormData({ ...formData, [event.target.name]: event.target.value });\n        };\n    \n        return (\n            <>\n            <div className=\"form\">\n            <input \n                type=\"text\" \n                name=\"title\" \n                value={formData.title}\n                onChange={handleChange}\n                placeholder=\"Name\"/>\n            <input \n                type=\"text\" \n                name=\"url\"  \n                value={formData.url}\n                onChange={handleChange}\n                placeholder=\"http://\"/>\n            <button \n            className={props.formType === 'edit' ? 'edit-button' : 'add-button'}\n            onClick={() => {\n                props.handleSubmit(formData);\n                // setFormData(props.initial)\n            }}\n                >\n                    {props.formType === 'edit' ? 'EDIT' : 'ADD'}\n                </button>\n                </div>\n            </>\n        )\n}","import React from 'react';\nimport './App.css';\nimport './css/style.scss'\nimport Form from './form.js'\n\nconst App = (props) => {\n  // Create State\n  const [bookmarks, setBookmarks] = React.useState(null);\n  const [editingBookmarkId, setEditingBookmarkId] = React.useState(null);\n\n  // Object for blank form for create\n  const blank = {\n      title: '',\n      url: ''\n      }\n\n  // Function to get bookmarks from API\n  const getInfo = async () => {\n      const response = await fetch('https://bookmarkd-api.herokuapp.com/bookmarks');\n      const result = await response.json();\n      setBookmarks(result);\n  };\n\n  React.useEffect(() => {\n      getInfo();\n  }, []);\n\n  const handleDelete = async (id) => {\n      const response = await fetch(`https://bookmarkd-api.herokuapp.com/bookmarks/${id}`, {\n          method: \"DELETE\"\n      })\n      // Re-fetches the updated list of holidays\n      getInfo();\n  }\n\n  const openEditForm = async (id) => {\n      setEditingBookmarkId(id)\n  }\n\n  const handleEdit = async (id, newData) => {\n      const response = await fetch(`https://bookmarkd-api.herokuapp.com/bookmarks/${id}`, {\n          method: 'PUT',\n          headers: {\n              'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(newData)\n      })\n      setEditingBookmarkId(null);\n      getInfo();\n  }\n\n\n  const handleCreate = async (data) => {\n      const response = await fetch('https://bookmarkd-api.herokuapp.com/bookmarks/', {\n          method: 'POST',\n          headers: {\n              'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(data)\n      })\n      getInfo();\n  }\n  return (\n    <div className=\"main-app\">\n            <h1 className=\"main-app__title\">/B/ookmark\\'d</h1>\n                <h3 className=\"main-app__create\">Create a bookmark</h3>\n                <Form formType=\"add\" initial={blank} handleSubmit={handleCreate}/>\n            <div className=\"main-app__bookmarks\">\n            <ul>\n                {bookmarks\n                ? bookmarks.sort((bookmark1, bookmark2) => {\n                    if(bookmark1.title < bookmark2.title) { return -1; }\n                    if(bookmark1.title > bookmark2.title) { return 1; }\n                    return 0;\n                })\n                    .map((bookmark) => {\n                    return (\n                        <li key={bookmark._id} className=\"main-app__bookmarks--items\">\n                            <div className=\"main-app__bookmarks--main-container\">\n                                <a href={bookmark.url} target=\"_blank\" rel=\"noopener noreferrer\"><h2>{bookmark.title}</h2></a>\n                                <div className=\"main-app__bookmarks--editdelete\">\n                                    <button\n                                    className=\"main-app__bookmarks--update\"\n                                        onClick={() => {\n                                            openEditForm(bookmark._id);\n                                        }}\n                                    >\n                                        ✎\n                                    </button>\n                                    <button\n                                    className=\"main-app__bookmarks--delete\"\n                                        onClick={() => {\n                                            handleDelete(bookmark._id);\n                                        }}    \n                                    >\n                                        ✕\n                                    </button>\n                                </div>\n                            </div>\n                                {/* see if initial works */}\n                                {bookmark._id === editingBookmarkId &&\n                                    <Form formType=\"edit\" initial={bookmark}\n                                        handleSubmit={(newData) => handleEdit(bookmark._id, newData)}\n                                    />\n                                }\n\n                        </li>\n                    )\n                }) : 'LOADING...'}\n            </ul>\n            </div>\n            </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}